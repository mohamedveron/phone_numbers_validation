// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"net/http"

	"github.com/go-chi/chi"
)

// PhoneNumber defines model for PhoneNumber.
type PhoneNumber struct {
	CustomerName *string `json:"customerName,omitempty"`
	Number       *string `json:"number,omitempty"`
}

// PhoneNumbersResponseData defines model for PhoneNumbersResponseData.
type PhoneNumbersResponseData struct {
	Code            string        `json:"code"`
	Country         string        `json:"country"`
	NotValidNumbers []PhoneNumber `json:"notValidNumbers"`
	ValidNumbers    []PhoneNumber `json:"validNumbers"`
}

// QueryResponse defines model for QueryResponse.
type QueryResponse struct {
	Count *float32                   `json:"count,omitempty"`
	Data  []PhoneNumbersResponseData `json:"data"`
	Limit *int                       `json:"limit,omitempty"`
	Page  *int                       `json:"page,omitempty"`
}

// GetPhoneNumbersJSONBody defines parameters for GetPhoneNumbers.
type GetPhoneNumbersJSONBody PhoneNumber

// GetPhoneNumbersJSONRequestBody defines body for GetPhoneNumbers for application/json ContentType.
type GetPhoneNumbersJSONRequestBody GetPhoneNumbersJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all Phone Numbers with filters
	// (POST /phoneNumbers)
	GetPhoneNumbers(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetPhoneNumbers operation middleware
func (siw *ServerInterfaceWrapper) GetPhoneNumbers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPhoneNumbers(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/phoneNumbers", wrapper.GetPhoneNumbers)
	})

	return r
}

